
"""
Master code to generate sheets with uncertainty 
USES OPENPYXL to generate mc tables WITH NAMED RANGE


"""
from __future__ import division
import openpyxl
#import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import math
import scipy.stats as stats
#import seaborn as sns
import random

###### Generate COL sheets with uncertainty in avg temp, days of transit, quality options
#name='t' #just temperature stochastic
#name='tdq' ## temperature stochastic & uncertainty in days & quality
#name='tq' ## temperature stochastic & uncertainty in quality
#name='td' # temperature stochastic & uncertainty in days

types=['t','td','tq','tdq']
for type in types:
    name=type

    #done with 8K 9/24/20
    random.seed(0)
    tempdist=[]
    daysdist=[]
    qualdist=[]
    
    #number of xls files genrated
    for k in range(1,5000):
        wb = openpyxl.Workbook()
        sheet = wb.active
        
        #named range for COL table so that AMPL can read it
        new_range = openpyxl.workbook.defined_name.DefinedName('COL', attr_text='Sheet!$A$1:$F$52')
        wb.defined_names.append(new_range)
        
        #Probability
        #avg temp as truncated normal
        #temperature as normal mean 55 with 5F variation
        avgtempfarenht = 58 #55
        avgtempkelvin = (avgtempfarenht + 459.67) * (5.0/9.0)
        sigmabig = 2.3
        highesttemp=avgtempfarenht + 3
        lowesttemp= avgtempfarenht - 3
        mu, sigmabig = avgtempkelvin, sigmabig
        lowerbig, upperbig = mu-2*sigmabig , mu+2*sigmabig
        
        Hmin=142.1
        Hmax=37.1
    
        #First column
        sheet['A1'] = 'DAYD'
        number_of_repeats = 4
        days=range(1,13)
        current_cell_num = 2
        
        for repeat in range(number_of_repeats):
            for day in days:
                cell_string = 'A%d' % current_cell_num
                sheet[cell_string] = day
                current_cell_num = current_cell_num + 1
            if repeat == number_of_repeats - 1:
                for day in range(13,16,1):
                    cell_string = 'A%d' % current_cell_num
                    sheet[cell_string] = day
                    current_cell_num = current_cell_num + 1
                
        #Second Column
        sheet['B1'] = 'CROP'                   
        for i, rowOfCellObjects in enumerate(sheet['B2':'B52']):
            for n, cellObj in enumerate(rowOfCellObjects):
                cellObj.value = 'TA'  
        
        #Third Column
        sheet['C1'] = 'QUAL'     
        for i, rowOfCellObjects in enumerate(sheet['C2':'C13']):
            for n, cellObj in enumerate(rowOfCellObjects):
                cellObj.value = 2
        
        sheet['C1'] = 'QUAL'     
        for i, rowOfCellObjects in enumerate(sheet['C14':'C25']):
            for n, cellObj in enumerate(rowOfCellObjects):
                cellObj.value = 3
                
        sheet['C1'] = 'QUAL'     
        for i, rowOfCellObjects in enumerate(sheet['C26':'C37']):
            for n, cellObj in enumerate(rowOfCellObjects):
                cellObj.value = 4
                          
        sheet['C1'] = 'QUAL'     
        for i, rowOfCellObjects in enumerate(sheet['C38':'C52']):
            for n, cellObj in enumerate(rowOfCellObjects):
                cellObj.value = 1
        
        #fourth Column  
        sheet['D1'] = 'COL'  
        sheet['E1'] = 'PROB'
        sheet['F1'] = 'SL'
        for i in range(1,52):
            #uncertainties in days
            days=sheet['A'][i].value
            daysuncertain=stats.uniform.rvs(loc=1,scale=.5)
    
            #uncertainty in qual
            qual=sheet['C'][i].value
    
            if days==1 and qual==1: 
                qual=1.3
                qualuncertain=stats.uniform.rvs(loc=1.3-.3,scale=.5)
            elif days==1 and qual==2:
                qual=2.2
                qualuncertain=stats.uniform.rvs(loc=2.2-.3,scale=.5)
            elif days==1 and qual==3:
                qual=3
                qualuncertain = stats.uniform.rvs(loc=3-.3,scale=.5)
            elif days==1 and qual==4:
                qual=4
                qualuncertain = stats.uniform.rvs(loc=4-.3,scale=.5)
            elif days > 1:
                qual=sheet['C'][i].value
                qualuncertain= sheet['D'][i-1].value
            
            #qualuncertain=stats.uniform.rvs(loc=qual-.6,scale=1)
            
            tempbig = stats.truncnorm.rvs((lowerbig - mu) / sigmabig, (upperbig - mu) / sigmabig, loc=mu, scale=sigmabig, size=15)
            
    ### restricted temp params generated
            sigma = .9
            highesttemp=avgtempfarenht + 1.4
            lowesttemp= avgtempfarenht -1.4
            mu, sigma = avgtempkelvin, sigma
            lower, upper = mu-2*sigma , mu+2*sigma
                         
            temprestricted = stats.truncnorm.rvs((lower - mu) / sigma, (upper - mu) / sigma, loc=mu, scale=sigma, size=15)
    
            #same prob dist for all series of days
            
            if days==1: temp = tempbig[0]
            if days==2: temp = tempbig[1]
            if days==3: temp = tempbig[2]
            if days==4: temp = tempbig[3]
            if days==5: temp = tempbig[4]
            if days==6: temp = tempbig[5]                
            if days==7: temp = tempbig[6]
            if days==8: temp = tempbig[7]
            if days==9: temp = tempbig[8]
            if days==10: temp = tempbig[9]
            if days==11: temp = temprestricted[10]
            if days==12: temp = temprestricted[11]
            if days==13: temp = temprestricted[12]
            if days==14: temp = tempbig[13]               
            if days==15: temp = tempbig[14]
            
                            
            temp=np.round(temp,3)
            
            #print(temp)
            kterm=0.0021*math.exp((138443/8.314)*((1/288.15)-(1/temp)))
            
            # temp only
            Hterm_t = (-6.197)*np.log((37+((124-37)/\
                                             (1+((math.exp(kterm*(1)*(124-37)))*\
                                                 (124-(117.26*math.exp(-0.161*qual))))/\
                                              ((117.26*math.exp(-0.161*qual))-37)))))+29.63
            # temp days
            Hterm_td = (-6.197)*np.log((37+((124-37)/\
                                              (1+((math.exp(kterm*daysuncertain*(124-37)))*\
                                                  (124-(117.26*math.exp(-0.161*qual))))/\
                                               ((117.26*math.exp(-0.161*qual))-37)))))+29.63
            #temp days qual
            Hterm_tdq = (-6.197)*np.log((37+((124-37)/\
                                               (1+((math.exp(kterm*daysuncertain*(124-37)))*\
                                                   (124-(117.26*math.exp(-0.161*qualuncertain))))/\
                                                ((117.26*math.exp(-0.161*qualuncertain))-37)))))+29.63
            #temp qual
            Hterm_tq = (-6.197)*np.log((37+((124-37)/\
                                              (1+((math.exp(kterm*(1)*(124-37)))*\
                                                  (124-(117.26*math.exp(-0.161*qualuncertain))))/\
                                               ((117.26*math.exp(-0.161*qualuncertain))-37)))))+29.63
    
    
            #Hterm_tdq = (-6.197)*np.log((37+((124-37)/(1+((math.exp(kterm*daysuncertain*(124-37)))*(124-(117.26*math.exp(-0.161*qualuncertain))))/((117.26*math.exp(-0.161*qualuncertain))-37)))))+29.531
    
            if name=="t": 
                Hterm=Hterm_t
            if name=="tq": 
                Hterm=Hterm_tq
            if name=="td": 
                Hterm=Hterm_td
            if name=="tdq": 
                Hterm=Hterm_tdq
            
           
            sheet['D'][i].value = Hterm
            
            if temp<283:
                prob=1
            elif temp>291:
                prob=1
            elif Hterm<1:
                prob=1
            else:
                prob=stats.uniform.rvs(loc=.00001,scale=.0000001)
              
            #print the value
            sheet['E'][i].value = prob
            
            #print(Hterm)
            if Hterm>1 and Hterm<2:
                SL=15
            elif Hterm>2 and Hterm<3:
                SL=12
            elif Hterm>3 and Hterm<4:
                SL=10
            elif Hterm>4 and Hterm<5:
                SL=8            
            elif Hterm>6 and Hterm<7:
                SL=5          
            else:
                SL=4
            
            sheet['F'][i].value = SL
            
            #print (temp)
            tempdist.append(temp)
            daysdist.append(daysuncertain)
            qualdist.append(qualuncertain)
    
    
        wb.save(filename=str(name) + '/'+ str(name) + str(k) + 'test.xlsx')#, keep_vba=True)
        print(k)
        print(name)
    tempdist=np.array(tempdist)
    daysdist = np.array(daysdist)
    



